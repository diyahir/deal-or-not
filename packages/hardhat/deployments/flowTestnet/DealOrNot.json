{
  "address": "0x562b84AF8644FCFdfBBccf6F83D3CB0eEf223b99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrf",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "eliminatedBoxes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "BoxesEliminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "DealAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "DealRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalPayout",
          "type": "uint256"
        }
      ],
      "name": "GameCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerBox",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HouseFundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HouseFundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENTRY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOUSE_OFFER_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_BOXES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "acceptDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositHouseFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "eliminateBoxes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerBoxIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        },
        {
          "internalType": "enum DealOrNot.GameState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxIndex",
          "type": "uint256"
        }
      ],
      "name": "getBoxValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getEliminatedBoxes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "playerBoxIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "eliminatedBoxes",
              "type": "uint256[]"
            },
            {
              "internalType": "enum DealOrNot.GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct DealOrNot.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHouseFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerGames",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingBoxes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "houseFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundEliminations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrf",
      "outputs": [
        {
          "internalType": "contract IVRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawHouseFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91a18957a45ae28a8bada92f82884ce87650987c12d62550957b6bce0e763b3e",
  "receipt": {
    "to": null,
    "from": "0x654B45fAdB36731BBB81571B649Ccd7E6a8c2CEF",
    "contractAddress": "0x562b84AF8644FCFdfBBccf6F83D3CB0eEf223b99",
    "transactionIndex": 0,
    "gasUsed": "2638492",
    "logsBloom": "0x
    "blockHash": "0x5ef0142d4bb74513dbcbeae6a3c15174a379537b119d2c4106b4931be80730b1",
    "transactionHash": "0x91a18957a45ae28a8bada92f82884ce87650987c12d62550957b6bce0e763b3e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 56348500,
        "transactionHash": "0x91a18957a45ae28a8bada92f82884ce87650987c12d62550957b6bce0e763b3e",
        "address": "0x562b84AF8644FCFdfBBccf6F83D3CB0eEf223b99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000654b45fadb36731bbb81571b649ccd7e6a8c2cef"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5ef0142d4bb74513dbcbeae6a3c15174a379537b119d2c4106b4931be80730b1"
      }
    ],
    "blockNumber": 56348500,
    "cumulativeGasUsed": "2638492",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x654B45fAdB36731BBB81571B649Ccd7E6a8c2CEF",
    "0xff67B22AD5c8c6EAA2EA2302EEe6b2333cA0c2cb"
  ],
  "numDeployments": 2,
  "solcInputHash": "606c4404c27a3953ef5cb7b024ced370",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrf\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"eliminatedBoxes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BoxesEliminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"DealAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"DealRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalPayout\",\"type\":\"uint256\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerBox\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HouseFundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HouseFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUSE_OFFER_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BOXES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"acceptDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositHouseFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"eliminateBoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerBoxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"internalType\":\"enum DealOrNot.GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxIndex\",\"type\":\"uint256\"}],\"name\":\"getBoxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getCurrentOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getEliminatedBoxes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerBoxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"eliminatedBoxes\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DealOrNot.GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct DealOrNot.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHouseFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getRemainingBoxes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundEliminations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrf\",\"outputs\":[{\"internalType\":\"contract IVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHouseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptDeal(uint256)\":{\"notice\":\"Accept the current deal offer\"},\"depositHouseFunds()\":{\"notice\":\"Owner deposits funds to house\"},\"eliminateBoxes(uint256)\":{\"notice\":\"Eliminate boxes for the current round (randomly selected) - OPTIMIZED If called when an offer is pending, it implicitly rejects the offer\"},\"getGameState(uint256)\":{\"notice\":\"View functions\"},\"startGame()\":{\"notice\":\"Start a new game - player deposits 1 ETH and selects their box\"},\"withdrawHouseFunds(uint256)\":{\"notice\":\"Owner withdraws house funds\"}},\"notice\":\"A Deal or Not smart contract that allows multiple players to play concurrent games Players deposit 1 ETH to start a game and can win up to 30 ETH House offers 75% of expected value at the end of each round\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DealOrNot.sol\":\"DealOrNot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/DealOrNot.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Use openzeppelin to inherit battle-tested implementations\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IVRF.sol\\\";\\n\\n/**\\n * A Deal or Not smart contract that allows multiple players to play concurrent games\\n * Players deposit 1 ETH to start a game and can win up to 30 ETH\\n * House offers 75% of expected value at the end of each round\\n * @author BuidlGuidl\\n */\\ncontract DealOrNot is ReentrancyGuard, Ownable {\\n    // Game state enum\\n    enum GameState {\\n        NotStarted,\\n        Playing,\\n        OfferMade,\\n        DealTaken,\\n        GameCompleted\\n    }\\n\\n    // Individual game struct\\n    struct Game {\\n        address player; // Player address\\n        uint256 deposit; // Deposit amount\\n        uint256 gameId; // Game ID\\n        uint256 playerBoxIndex; // Index of the player's box\\n        uint256 currentRound; // Current round of the game\\n        uint256[] eliminatedBoxes; // Boxes that have been eliminated\\n        GameState state; // Current state of the game\\n        bool isActive; // Whether the game is still active\\n    }\\n\\n    // Prize pool (fixed amounts in wei) - 26 boxes total\\n    uint256[] public prizePool;\\n\\n    // Game tracking\\n    mapping(address => uint256) public gameIds;\\n    mapping(uint256 => Game) public games;\\n    mapping(address => uint256[]) public playerGames;\\n    mapping(uint256 => uint256) public requestIds;\\n    uint256 public nextGameId;\\n\\n    // House funds\\n    uint256 public houseFunds;\\n\\n    // Constants\\n    uint256 public constant ENTRY_FEE = 12 ether;\\n    uint256 public constant HOUSE_OFFER_PERCENTAGE = 75; // 75% of EV\\n    uint256 public constant TOTAL_BOXES = 26;\\n\\n    // VRF\\n    IVRF public vrf;\\n\\n    // Round elimination requirements\\n    uint256[] public roundEliminations = [6, 5, 4, 3, 2, 1]; // Boxes to eliminate per round\\n\\n    // Events\\n    event GameStarted(uint256 indexed gameId, address indexed player, uint256 playerBox);\\n    event BoxesEliminated(uint256 indexed gameId, uint256[] eliminatedBoxes, uint256 round);\\n    event DealAccepted(uint256 indexed gameId, address indexed player, uint256 payout);\\n    event DealRejected(uint256 indexed gameId, uint256 round);\\n    event GameCompleted(uint256 indexed gameId, address indexed player, uint256 finalPayout);\\n    event HouseFundsDeposited(uint256 amount);\\n    event HouseFundsWithdrawn(uint256 amount);\\n\\n    // Modifiers\\n    modifier gameExists(uint256 gameId) {\\n        require(gameId < nextGameId, \\\"Game does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayer(uint256 gameId) {\\n        require(games[gameId].player == msg.sender, \\\"Not your game\\\");\\n        _;\\n    }\\n\\n    modifier gameInState(uint256 gameId, GameState requiredState) {\\n        require(games[gameId].state == requiredState, \\\"Invalid game state\\\");\\n        _;\\n    }\\n\\n    modifier houseSolvent(uint256 amount) {\\n        require(houseFunds >= amount, \\\"House insufficient funds\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner, address _vrf) Ownable(_owner) {\\n        vrf = IVRF(_vrf);\\n        _initializePrizePool();\\n    }\\n\\n    /**\\n     * Initialize the prize pool with 26 box values\\n     */\\n    function _initializePrizePool() internal {\\n        prizePool = [\\n            0.00001 ether,\\n            0.0001 ether,\\n            0.0005 ether,\\n            0.001 ether,\\n            0.0025 ether,\\n            0.005 ether,\\n            0.0075 ether,\\n            0.01 ether,\\n            0.02 ether,\\n            0.03 ether,\\n            0.04 ether,\\n            0.05 ether,\\n            0.075 ether,\\n            0.1 ether,\\n            0.5 ether,\\n            1 ether,\\n            2.5 ether,\\n            5 ether,\\n            7.5 ether,\\n            10 ether,\\n            20 ether,\\n            30 ether,\\n            40 ether,\\n            50 ether,\\n            75 ether,\\n            100 ether\\n        ];\\n    }\\n\\n    /**\\n     * Start a new game - player deposits 1 ETH and selects their box\\n     */\\n    function startGame() external payable nonReentrant returns (uint256) {\\n        require(msg.value == ENTRY_FEE, \\\"Must deposit exactly 1 ETH\\\");\\n\\n        uint256 gameId = nextGameId++;\\n        uint256 playerBoxIndex = _generateRandomBoxIndex(gameId, msg.sender);\\n\\n        // Create new game\\n        games[gameId] = Game({\\n            player: msg.sender,\\n            deposit: msg.value,\\n            gameId: gameId,\\n            playerBoxIndex: playerBoxIndex,\\n            currentRound: 0,\\n            eliminatedBoxes: new uint256[](0),\\n            state: GameState.Playing,\\n            isActive: true\\n        });\\n\\n        // Track player's games\\n        playerGames[msg.sender].push(gameId);\\n        gameIds[msg.sender] = gameId;\\n\\n        uint256 requestId = vrf.requestRandomNumber(bytes32(gameId));\\n        requestIds[gameId] = requestId;\\n\\n        emit GameStarted(gameId, msg.sender, playerBoxIndex);\\n\\n        return gameId;\\n    }\\n\\n    /**\\n     * Eliminate boxes for the current round (randomly selected) - OPTIMIZED\\n     * If called when an offer is pending, it implicitly rejects the offer\\n     */\\n    function eliminateBoxes(uint256 gameId) external gameExists(gameId) onlyPlayer(gameId) nonReentrant {\\n        Game storage game = games[gameId];\\n        require(game.state == GameState.Playing || game.state == GameState.OfferMade, \\\"Invalid game state\\\");\\n\\n        // If there was a pending offer, emit rejection event\\n        if (game.state == GameState.OfferMade) {\\n            emit DealRejected(gameId, game.currentRound);\\n        }\\n\\n        // Check if we've reached the final round\\n        if (game.currentRound >= roundEliminations.length) {\\n            _completeGame(gameId);\\n            return;\\n        }\\n\\n        // Randomly select and directly add boxes to eliminated array\\n        uint256 numToEliminate = roundEliminations[game.currentRound];\\n        uint256[] memory boxesToEliminate = _selectAndEliminateBoxes(gameId, numToEliminate);\\n\\n        game.currentRound++;\\n        game.state = GameState.OfferMade;\\n\\n        emit BoxesEliminated(gameId, boxesToEliminate, game.currentRound);\\n\\n        // request a new random number\\n        uint256 requestId = vrf.requestRandomNumber(bytes32(gameId));\\n        requestIds[gameId] = requestId;\\n    }\\n\\n    /**\\n     * More efficient random box selection - directly adds to storage and returns for events\\n     */\\n    function _selectAndEliminateBoxes(uint256 gameId, uint256 numToEliminate) internal returns (uint256[] memory) {\\n        Game storage game = games[gameId];\\n\\n        // Pre-calculate total available boxes to avoid repeated calculations\\n        uint256 totalEliminated = game.eliminatedBoxes.length;\\n        uint256 availableCount = TOTAL_BOXES - totalEliminated - 1; // -1 for player's box\\n        require(availableCount >= numToEliminate, \\\"Not enough boxes to eliminate\\\");\\n\\n        uint256[] memory selectedBoxes = new uint256[](numToEliminate);\\n        uint256 selectedCount = 0;\\n        uint256 attempts = 0;\\n        // More generous max attempts calculation that accounts for available boxes\\n        uint256 maxAttempts = numToEliminate * availableCount + (numToEliminate * 10); // Prevent infinite loops\\n\\n        // More efficient selection without creating large temporary arrays\\n        while (selectedCount < numToEliminate && attempts < maxAttempts) {\\n            uint256 randomBox = _generateRandomBoxForElimination(gameId);\\n\\n            // Check if box is available (not player's box, not already eliminated, not already selected)\\n            if (\\n                randomBox != game.playerBoxIndex && !_isBoxEliminated(randomBox, game.eliminatedBoxes)\\n                    && !_isBoxInSelection(randomBox, selectedBoxes, selectedCount)\\n            ) {\\n                selectedBoxes[selectedCount] = randomBox;\\n                game.eliminatedBoxes.push(randomBox);\\n                selectedCount++;\\n            }\\n            attempts++;\\n        }\\n\\n        require(selectedCount == numToEliminate, \\\"Failed to select required boxes\\\");\\n        return selectedBoxes;\\n    }\\n\\n    /**\\n     * More efficient check if box is already eliminated using early termination\\n     */\\n    function _isBoxEliminated(uint256 box, uint256[] storage eliminatedBoxes) internal view returns (bool) {\\n        uint256 length = eliminatedBoxes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (eliminatedBoxes[i] == box) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Check if box is in current selection (for current round)\\n     */\\n    function _isBoxInSelection(uint256 box, uint256[] memory selection, uint256 count) internal pure returns (bool) {\\n        for (uint256 i = 0; i < count; i++) {\\n            if (selection[i] == box) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Generate random box index with better entropy\\n     */\\n    function _generateRandomBoxForElimination(uint256 gameId) internal returns (uint256) {\\n        uint256 randomSeed = vrf.getRandomNumber(requestIds[gameId]);\\n\\n        return randomSeed % TOTAL_BOXES;\\n    }\\n\\n    /**\\n     * Accept the current deal offer\\n     */\\n    function acceptDeal(uint256 gameId)\\n        external\\n        gameExists(gameId)\\n        onlyPlayer(gameId)\\n        gameInState(gameId, GameState.OfferMade)\\n        nonReentrant\\n        houseSolvent(_calculateOffer(gameId))\\n    {\\n        Game storage game = games[gameId];\\n        uint256 payout = _calculateOffer(gameId);\\n\\n        game.state = GameState.DealTaken;\\n        game.isActive = false;\\n\\n        // Transfer payout to player\\n        houseFunds -= payout;\\n        payable(game.player).transfer(payout);\\n\\n        emit DealAccepted(gameId, game.player, payout);\\n        emit GameCompleted(gameId, game.player, payout);\\n    }\\n\\n    /**\\n     * Complete the game - player gets their original box value\\n     */\\n    function _completeGame(uint256 gameId) internal {\\n        Game storage game = games[gameId];\\n        uint256 finalPayout = prizePool[game.playerBoxIndex];\\n\\n        game.state = GameState.GameCompleted;\\n        game.isActive = false;\\n\\n        // Transfer final payout to player\\n        require(houseFunds >= finalPayout, \\\"House insufficient funds\\\");\\n        houseFunds -= finalPayout;\\n        payable(game.player).transfer(finalPayout);\\n\\n        emit GameCompleted(gameId, game.player, finalPayout);\\n    }\\n\\n    /**\\n     * Calculate house offer (75% of expected value)\\n     */\\n    function _calculateOffer(uint256 gameId) internal view returns (uint256) {\\n        Game storage game = games[gameId];\\n        uint256 totalValue = 0;\\n\\n        // Include player's box in calculation\\n        totalValue += prizePool[game.playerBoxIndex];\\n\\n        // Add remaining boxes (all boxes except eliminated ones and player's box)\\n        for (uint256 i = 0; i < TOTAL_BOXES; i++) {\\n            if (i != game.playerBoxIndex && !_isBoxInArray(i, game.eliminatedBoxes)) {\\n                totalValue += prizePool[i];\\n            }\\n        }\\n\\n        uint256 totalBoxes = (TOTAL_BOXES - game.eliminatedBoxes.length); // Total minus eliminated\\n        uint256 expectedValue = totalValue / totalBoxes;\\n\\n        return (expectedValue * HOUSE_OFFER_PERCENTAGE) / 100;\\n    }\\n\\n    /**\\n     * Generate pseudo-random box index for player\\n     */\\n    function _generateRandomBoxIndex(uint256 gameId, address player) internal view returns (uint256) {\\n        uint256 randomSeed = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, block.prevrandao, player, gameId, blockhash(block.number - 1)))\\n        );\\n\\n        return randomSeed % TOTAL_BOXES;\\n    }\\n\\n    /**\\n     * Check if a box is in the array\\n     */\\n    function _isBoxInArray(uint256 box, uint256[] memory array) internal pure returns (bool) {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == box) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Owner deposits funds to house\\n     */\\n    function depositHouseFunds() external payable onlyOwner {\\n        houseFunds += msg.value;\\n        emit HouseFundsDeposited(msg.value);\\n    }\\n\\n    /**\\n     * Owner withdraws house funds\\n     */\\n    function withdrawHouseFunds(uint256 amount) external onlyOwner nonReentrant {\\n        require(amount <= houseFunds, \\\"Insufficient house funds\\\");\\n        require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n\\n        houseFunds -= amount;\\n        payable(owner()).transfer(amount);\\n        emit HouseFundsWithdrawn(amount);\\n    }\\n\\n    /**\\n     * View functions\\n     */\\n    function getGameState(uint256 gameId) external view gameExists(gameId) returns (Game memory) {\\n        return games[gameId];\\n    }\\n\\n    function getPlayerGames(address player) external view returns (uint256[] memory) {\\n        return playerGames[player];\\n    }\\n\\n    function getRemainingBoxes(uint256 gameId) external view gameExists(gameId) returns (uint256[] memory) {\\n        Game storage game = games[gameId];\\n\\n        // Calculate how many boxes remain\\n        uint256 remainingCount = TOTAL_BOXES - game.eliminatedBoxes.length - 1; // -1 for player's box\\n        uint256[] memory remaining = new uint256[](remainingCount);\\n\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < TOTAL_BOXES; i++) {\\n            if (i != game.playerBoxIndex && !_isBoxInArray(i, game.eliminatedBoxes)) {\\n                remaining[index] = i;\\n                index++;\\n            }\\n        }\\n\\n        return remaining;\\n    }\\n\\n    function getEliminatedBoxes(uint256 gameId) external view gameExists(gameId) returns (uint256[] memory) {\\n        return games[gameId].eliminatedBoxes;\\n    }\\n\\n    function getCurrentOffer(uint256 gameId) external view gameExists(gameId) returns (uint256) {\\n        return _calculateOffer(gameId);\\n    }\\n\\n    function getPrizePool() external view returns (uint256[] memory) {\\n        return prizePool;\\n    }\\n\\n    function getBoxValue(uint256 boxIndex) external view returns (uint256) {\\n        require(boxIndex < TOTAL_BOXES, \\\"Invalid box index\\\");\\n        return prizePool[boxIndex];\\n    }\\n\\n    function getHouseFunds() external view returns (uint256) {\\n        return houseFunds;\\n    }\\n\\n    function getTotalGames() external view returns (uint256) {\\n        return nextGameId;\\n    }\\n\\n    /**\\n     * Emergency function to allow contract to receive ETH\\n     */\\n    receive() external payable {\\n        houseFunds += msg.value;\\n        emit HouseFundsDeposited(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xa4e8d499f4c54714171fb981818a126fc743833cf7013b889dc5b6272fb0ddc0\",\"license\":\"MIT\"},\"contracts/interfaces/IVRF.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IVRF {\\n    function requestRandomNumber(bytes32) external payable returns (uint256);\\n\\n    function getRandomNumber(uint256 requestId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa9e0d7d663603bbf425d2b647c730aa4aaf1e5ac3c9cb23ac14944f531930c94\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61014060405260066080818152600560a052600460c052600360e05260026101005260016101205261003491600a91906102ab565b5034801561004157600080fd5b5060405161234d38038061234d83398101604081905261006091610372565b6001600055816001600160a01b03811661009457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61009d816100c8565b50600980546001600160a01b0319166001600160a01b0383161790556100c161011a565b50506103a5565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051610340810182526509184e72a0008152655af3107a400060208201526601c6bf526340009181019190915266038d7ea4c6800060608201526608e1bc9bf0400060808201526611c37937e0800060a0820152661aa535d3d0c00060c0820152662386f26fc1000060e082015266470de4df820000610100820152666a94d74f430000610120820152668e1bc9bf04000061014082015266b1a2bc2ec5000061016082015267010a741a4627800061018082015267016345785d8a00006101a08201526706f05b59d3b200006101c0820152670de0b6b3a76400006101e08201526722b1c8c1227a0000610200820152674563918244f400006102208201526768155a43676e0000610240820152678ac7230489e800006102608201526801158e460913d000006102808201526801a055690d9db800006102a082015268022b1c8c1227a000006102c08201526802b5e3af16b18800006102e0820152680410d586a20a4c000061030082015268056bc75e2d631000006103208201526102a890600290601a6102fb565b50565b8280548282559060005260206000209081019282156102eb579160200282015b828111156102eb578251829060ff169055916020019190600101906102cb565b506102f7929150610341565b5090565b8280548282559060005260206000209081019282156102eb579160200282015b828111156102eb57825182906001600160481b031690559160200191906001019061031b565b5b808211156102f75760008155600101610342565b80516001600160a01b038116811461036d57600080fd5b919050565b6000806040838503121561038557600080fd5b61038e83610356565b915061039c60208401610356565b90509250929050565b611f99806103b46000396000f3fe6080604052600436106101c65760003560e01c8063884bf67c116100f7578063d47a879c11610095578063dd4823bf11610064578063dd4823bf1461056c578063f2fde38b14610581578063f6d361cc146105a1578063ffde0c74146105bd57600080fd5b8063d47a879c1461050f578063d636e6fa1461052f578063d65ab5f21461054f578063d65eba341461055757600080fd5b8063a07ccee9116100d1578063a07ccee9146104b1578063abfd4cf9146104b9578063b135bbb0146104d9578063c8c057d0146104ef57600080fd5b8063884bf67c1461045e5780638914d7f3146104735780638da5cb5b1461049357600080fd5b8063665a9e5f116101645780637d41702e1161013e5780637d41702e146103db5780637d59441a146103fb5780637e0d29f71461041b5780638796ba8c1461043157600080fd5b8063665a9e5f14610377578063715018a6146103a457806373948035146103bb57600080fd5b8063129daf84116101a0578063129daf8414610300578063373692dc1461032d5780635bd4349b14610342578063655796ce1461035757600080fd5b80630a5694c21461021c5780630c9490431461024f578063117a5b901461028757600080fd5b366102175734600860008282546101dd9190611c3a565b90915550506040513481527f698c6b09e77d6ec12d764617264649ec58ae335c4a80b921d92ee2e44cd2dc559060200160405180910390a1005b600080fd5b34801561022857600080fd5b5061023c610237366004611c69565b6105ea565b6040519081526020015b60405180910390f35b34801561025b57600080fd5b5060095461026f906001600160a01b031681565b6040516001600160a01b039091168152602001610246565b34801561029357600080fd5b506102ed6102a2366004611c93565b60046020819052600091825260409091208054600182015460028301546003840154948401546006909401546001600160a01b03909316949193909260ff8082169161010090041687565b6040516102469796959493929190611ce4565b34801561030c57600080fd5b5061032061031b366004611d31565b61061b565b6040516102469190611d88565b34801561033957600080fd5b5061023c601a81565b34801561034e57600080fd5b5060075461023c565b34801561036357600080fd5b5061023c610372366004611c93565b610687565b34801561038357600080fd5b5061023c610392366004611d31565b60036020526000908152604090205481565b3480156103b057600080fd5b506103b96106a8565b005b3480156103c757600080fd5b506103206103d6366004611c93565b6106bc565b3480156103e757600080fd5b506103b96103f6366004611c93565b61081f565b34801561040757600080fd5b506103b9610416366004611c93565b610a7d565b34801561042757600080fd5b5061023c60085481565b34801561043d57600080fd5b5061023c61044c366004611c93565b60066020526000908152604090205481565b34801561046a57600080fd5b50610320610bc1565b34801561047f57600080fd5b5061023c61048e366004611c93565b610c19565b34801561049f57600080fd5b506001546001600160a01b031661026f565b6103b9610c4d565b3480156104c557600080fd5b506103206104d4366004611c93565b610ca1565b3480156104e557600080fd5b5061023c60075481565b3480156104fb57600080fd5b5061023c61050a366004611c93565b610d29565b34801561051b57600080fd5b506103b961052a366004611c93565b610d94565b34801561053b57600080fd5b5061023c61054a366004611c93565b61104b565b61023c61105b565b34801561056357600080fd5b5061023c604b81565b34801561057857600080fd5b5060085461023c565b34801561058d57600080fd5b506103b961059c366004611d31565b611322565b3480156105ad57600080fd5b5061023c67a688906bd8b0000081565b3480156105c957600080fd5b506105dd6105d8366004611c93565b61135d565b6040516102469190611d9b565b6005602052816000526040600020818154811061060657600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561067b57602002820191906000526020600020905b815481526020019060010190808311610667575b50505050509050919050565b600a818154811061069757600080fd5b600091825260209091200154905081565b6106b0611479565b6106ba60006114a6565b565b60608160075481106106e95760405162461bcd60e51b81526004016106e090611e4e565b60405180910390fd5b6000838152600460205260408120600581015490919060019061070d90601a611e7b565b6107179190611e7b565b905060008167ffffffffffffffff81111561073457610734611e8e565b60405190808252806020026020018201604052801561075d578160200160208202803683370190505b5090506000805b601a81101561081357846003015481141580156107da57506107d881866005018054806020026020016040519081016040528092919081815260200182805480156107ce57602002820191906000526020600020905b8154815260200190600101908083116107ba575b50505050506114f8565b155b1561080b57808383815181106107f2576107f2611ea4565b60209081029190910101528161080781611eba565b9250505b600101610764565b50909695505050505050565b8060075481106108415760405162461bcd60e51b81526004016106e090611e4e565b60008281526004602052604090205482906001600160a01b031633146108995760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b60448201526064016106e0565b8260028060008381526004602081905260409091206006015460ff16908111156108c5576108c5611cac565b146109075760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642067616d6520737461746560701b60448201526064016106e0565b61090f611543565b6109188561156d565b8060085410156109655760405162461bcd60e51b8152602060048201526018602482015277486f75736520696e73756666696369656e742066756e647360401b60448201526064016106e0565b60008681526004602052604081209061097d8861156d565b60068301805461ffff191660031790556008805491925082916000906109a4908490611e7b565b909155505081546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156109e2573d6000803e3d6000fd5b5081546040518281526001600160a01b039091169089907f4040b057894dad8489aa292521553397cd14fa0e341f6e6c9b646f78154efd1c9060200160405180910390a381546040518281526001600160a01b039091169089907ff6ae188cc6336ef5ad970d3c81cda5814b4c4902540924c6924debe94ece13eb9060200160405180910390a3505050610a766001600055565b5050505050565b610a85611479565b610a8d611543565b600854811115610adf5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420686f7573652066756e6473000000000000000060448201526064016106e0565b47811115610b2f5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016106e0565b8060086000828254610b419190611e7b565b90915550506001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610b80573d6000803e3d6000fd5b506040518181527fe474834969d675e228bf44a31064bc4f07a62bf4073d488e004ff38078575acf9060200160405180910390a1610bbe6001600055565b50565b60606002805480602002602001604051908101604052809291908181526020018280548015610c0f57602002820191906000526020600020905b815481526020019060010190808311610bfb575b5050505050905090565b6000816007548110610c3d5760405162461bcd60e51b81526004016106e090611e4e565b610c468361156d565b9392505050565b610c55611479565b3460086000828254610c679190611c3a565b90915550506040513481527f698c6b09e77d6ec12d764617264649ec58ae335c4a80b921d92ee2e44cd2dc559060200160405180910390a1565b6060816007548110610cc55760405162461bcd60e51b81526004016106e090611e4e565b60008381526004602090815260409182902060050180548351818402810184019094528084529091830182828015610d1c57602002820191906000526020600020905b815481526020019060010190808311610d08575b5050505050915050919050565b6000601a8210610d6f5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840c4def040d2dcc8caf607b1b60448201526064016106e0565b60028281548110610d8257610d82611ea4565b90600052602060002001549050919050565b806007548110610db65760405162461bcd60e51b81526004016106e090611e4e565b60008281526004602052604090205482906001600160a01b03163314610e0e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b60448201526064016106e0565b610e16611543565b60008381526004602052604090206001600682015460ff166004811115610e3f57610e3f611cac565b1480610e6357506002600682015460ff166004811115610e6157610e61611cac565b145b610ea45760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642067616d6520737461746560701b60448201526064016106e0565b6002600682015460ff166004811115610ebf57610ebf611cac565b03610f0357837f084c4e8dbed002b0fe4ec01207ee9d6c85c1b98a93cfad7a51407dd25f5a14288260040154604051610efa91815260200190565b60405180910390a25b600a54600482015410610f1f57610f19846116a2565b5061103c565b6000600a826004015481548110610f3857610f38611ea4565b906000526020600020015490506000610f5186836117d2565b6004840180549192506000610f6583611eba565b909155505060068301805460ff19166002179055600483015460405187917fdc5195a0a717d87adda811cfdff4a54ca7bcb612e76854d81b13c20612b6fe5791610fb0918591611ed3565b60405180910390a26009546040516317a627af60e31b8152600481018890526000916001600160a01b03169063bd313d78906024016020604051808303816000875af1158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190611ef5565b600088815260066020526040902055505050505b6110466001600055565b505050565b6002818154811061069757600080fd5b6000611065611543565b67a688906bd8b0000034146110bc5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206465706f7369742065786163746c7920312045544800000000000060448201526064016106e0565b60078054600091826110cd83611eba565b91905055905060006110df82336119cd565b9050604051806101000160405280336001600160a01b0316815260200134815260200183815260200182815260200160008152602001600067ffffffffffffffff81111561112f5761112f611e8e565b604051908082528060200260200182016040528015611158578160200160208202803683370190505b508152602001600181526001602091820181905260008581526004808452604091829020855181546001600160a01b0319166001600160a01b0390911617815585850151938101939093559084015160028301556060840151600383015560808401519082015560a0830151805191926111da92600585019290910190611b65565b5060c082015160068201805460ff191660018360048111156111fe576111fe611cac565b021790555060e09190910151600690910180549115156101000261ff00199092169190911790553360008181526005602090815260408083208054600181018255908452828420018690559282526003905281812084905560095491516317a627af60e31b81526004810185905290916001600160a01b03169063bd313d78906024016020604051808303816000875af11580156112a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c49190611ef5565b6000848152600660205260409081902082905551909150339084907f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c354449061130e9086815260200190565b60405180910390a350506001600055905090565b61132a611479565b6001600160a01b03811661135457604051631e4fbdf760e01b8152600060048201526024016106e0565b610bbe816114a6565b611365611bb0565b8160075481106113875760405162461bcd60e51b81526004016106e090611e4e565b60008381526004602081815260409283902083516101008101855281546001600160a01b03168152600182015481840152600282015481860152600382015460608201529281015460808401526005810180548551818502810185019096528086529394919360a086019383018282801561142157602002820191906000526020600020905b81548152602001906001019080831161140d575b5050509183525050600682015460209091019060ff16600481111561144857611448611cac565b600481111561145957611459611cac565b815260069190910154610100900460ff1615156020909101529392505050565b6001546001600160a01b031633146106ba5760405163118cdaa760e01b81523360048201526024016106e0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b8251811015611537578383828151811061151857611518611ea4565b60200260200101510361152f57600191505061153d565b6001016114fc565b50600090505b92915050565b60026000540361156657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000818152600460205260408120600381015460028054849290811061159557611595611ea4565b9060005260206000200154816115ab9190611c3a565b905060005b601a81101561165d5782600301548114158015611624575061162281846005018054806020026020016040519081016040528092919081815260200182805480156107ce57602002820191906000526020600020908154815260200190600101908083116107ba5750505050506114f8565b155b15611655576002818154811061163c5761163c611ea4565b9060005260206000200154826116529190611c3a565b91505b6001016115b0565b50600582015460009061167190601a611e7b565b9050600061167f8284611f24565b9050606461168e604b83611f38565b6116989190611f24565b9695505050505050565b600081815260046020526040812060038101546002805492939290919081106116cd576116cd611ea4565b60009182526020909120015460068301805461ffff191660041790556008549091508111156117395760405162461bcd60e51b8152602060048201526018602482015277486f75736520696e73756666696369656e742066756e647360401b60448201526064016106e0565b806008600082825461174b9190611e7b565b909155505081546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611789573d6000803e3d6000fd5b5081546040518281526001600160a01b039091169084907ff6ae188cc6336ef5ad970d3c81cda5814b4c4902540924c6924debe94ece13eb9060200160405180910390a3505050565b6000828152600460205260408120600581015460609260016117f583601a611e7b565b6117ff9190611e7b565b9050848110156118515760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820626f78657320746f20656c696d696e61746500000060448201526064016106e0565b60008567ffffffffffffffff81111561186c5761186c611e8e565b604051908082528060200260200182016040528015611895578160200160208202803683370190505b509050600080806118a789600a611f38565b6118b1868b611f38565b6118bb9190611c3a565b90505b88831080156118cc57508082105b156119705760006118dc8b611a47565b9050876003015481141580156118fc57506118fa8189600501611ad7565b155b8015611910575061190e818686611b27565b155b1561195d578085858151811061192857611928611ea4565b6020908102919091018101919091526005890180546001810182556000918252919020018190558361195981611eba565b9450505b8261196781611eba565b935050506118be565b8883146119bf5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f2073656c65637420726571756972656420626f7865730060448201526064016106e0565b509198975050505050505050565b600080424484866119df600143611e7b565b6040805160208101969096528501939093526bffffffffffffffffffffffff19606092831b1691840191909152607483015240609482015260b40160408051601f1981840301815291905280516020909101209050611a3f601a82611f4f565b949350505050565b600954600082815260066020526040808220549051632cdc85e960e21b81526004810191909152909182916001600160a01b039091169063b37217a4906024016020604051808303816000875af1158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190611ef5565b9050610c46601a82611f4f565b8054600090815b81811015611b1c5784848281548110611af957611af9611ea4565b906000526020600020015403611b145760019250505061153d565b600101611ade565b506000949350505050565b6000805b82811015611b1c5784848281518110611b4657611b46611ea4565b602002602001015103611b5d576001915050610c46565b600101611b2b565b828054828255906000526020600020908101928215611ba0579160200282015b82811115611ba0578251825591602001919060010190611b85565b50611bac929150611c0f565b5090565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006004811115611c0257611c02611cac565b8152600060209091015290565b5b80821115611bac5760008155600101611c10565b634e487b7160e01b600052601160045260246000fd5b8082018082111561153d5761153d611c24565b80356001600160a01b0381168114611c6457600080fd5b919050565b60008060408385031215611c7c57600080fd5b611c8583611c4d565b946020939093013593505050565b600060208284031215611ca557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110611ce057634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03881681526020810187905260408101869052606081018590526080810184905260e08101611d1d60a0830185611cc2565b82151560c083015298975050505050505050565b600060208284031215611d4357600080fd5b610c4682611c4d565b60008151808452602080850194506020840160005b83811015611d7d57815187529582019590820190600101611d61565b509495945050505050565b602081526000610c466020830184611d4c565b60006020808352610120830160018060a01b03855116828501528185015160408501526040850151606085015260608501516080850152608085015160a085015260a08501516101008060c0870152828251808552610140880191508584019450600093505b80841015611e215784518252938501936001939093019290850190611e01565b5060c08801519450611e3660e0880186611cc2565b60e09790970151151595019490945250929392505050565b60208082526013908201527211d85b5948191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b8181038181111561153d5761153d611c24565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611ecc57611ecc611c24565b5060010190565b604081526000611ee66040830185611d4c565b90508260208301529392505050565b600060208284031215611f0757600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082611f3357611f33611f0e565b500490565b808202811582820484141761153d5761153d611c24565b600082611f5e57611f5e611f0e565b50069056fea2646970667358221220a0476e01ffa0e0ab5cbfcb4b9b2a16607ea923863c64162b92fe5607fedf23cf64736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c8063884bf67c116100f7578063d47a879c11610095578063dd4823bf11610064578063dd4823bf1461056c578063f2fde38b14610581578063f6d361cc146105a1578063ffde0c74146105bd57600080fd5b8063d47a879c1461050f578063d636e6fa1461052f578063d65ab5f21461054f578063d65eba341461055757600080fd5b8063a07ccee9116100d1578063a07ccee9146104b1578063abfd4cf9146104b9578063b135bbb0146104d9578063c8c057d0146104ef57600080fd5b8063884bf67c1461045e5780638914d7f3146104735780638da5cb5b1461049357600080fd5b8063665a9e5f116101645780637d41702e1161013e5780637d41702e146103db5780637d59441a146103fb5780637e0d29f71461041b5780638796ba8c1461043157600080fd5b8063665a9e5f14610377578063715018a6146103a457806373948035146103bb57600080fd5b8063129daf84116101a0578063129daf8414610300578063373692dc1461032d5780635bd4349b14610342578063655796ce1461035757600080fd5b80630a5694c21461021c5780630c9490431461024f578063117a5b901461028757600080fd5b366102175734600860008282546101dd9190611c3a565b90915550506040513481527f698c6b09e77d6ec12d764617264649ec58ae335c4a80b921d92ee2e44cd2dc559060200160405180910390a1005b600080fd5b34801561022857600080fd5b5061023c610237366004611c69565b6105ea565b6040519081526020015b60405180910390f35b34801561025b57600080fd5b5060095461026f906001600160a01b031681565b6040516001600160a01b039091168152602001610246565b34801561029357600080fd5b506102ed6102a2366004611c93565b60046020819052600091825260409091208054600182015460028301546003840154948401546006909401546001600160a01b03909316949193909260ff8082169161010090041687565b6040516102469796959493929190611ce4565b34801561030c57600080fd5b5061032061031b366004611d31565b61061b565b6040516102469190611d88565b34801561033957600080fd5b5061023c601a81565b34801561034e57600080fd5b5060075461023c565b34801561036357600080fd5b5061023c610372366004611c93565b610687565b34801561038357600080fd5b5061023c610392366004611d31565b60036020526000908152604090205481565b3480156103b057600080fd5b506103b96106a8565b005b3480156103c757600080fd5b506103206103d6366004611c93565b6106bc565b3480156103e757600080fd5b506103b96103f6366004611c93565b61081f565b34801561040757600080fd5b506103b9610416366004611c93565b610a7d565b34801561042757600080fd5b5061023c60085481565b34801561043d57600080fd5b5061023c61044c366004611c93565b60066020526000908152604090205481565b34801561046a57600080fd5b50610320610bc1565b34801561047f57600080fd5b5061023c61048e366004611c93565b610c19565b34801561049f57600080fd5b506001546001600160a01b031661026f565b6103b9610c4d565b3480156104c557600080fd5b506103206104d4366004611c93565b610ca1565b3480156104e557600080fd5b5061023c60075481565b3480156104fb57600080fd5b5061023c61050a366004611c93565b610d29565b34801561051b57600080fd5b506103b961052a366004611c93565b610d94565b34801561053b57600080fd5b5061023c61054a366004611c93565b61104b565b61023c61105b565b34801561056357600080fd5b5061023c604b81565b34801561057857600080fd5b5060085461023c565b34801561058d57600080fd5b506103b961059c366004611d31565b611322565b3480156105ad57600080fd5b5061023c67a688906bd8b0000081565b3480156105c957600080fd5b506105dd6105d8366004611c93565b61135d565b6040516102469190611d9b565b6005602052816000526040600020818154811061060657600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561067b57602002820191906000526020600020905b815481526020019060010190808311610667575b50505050509050919050565b600a818154811061069757600080fd5b600091825260209091200154905081565b6106b0611479565b6106ba60006114a6565b565b60608160075481106106e95760405162461bcd60e51b81526004016106e090611e4e565b60405180910390fd5b6000838152600460205260408120600581015490919060019061070d90601a611e7b565b6107179190611e7b565b905060008167ffffffffffffffff81111561073457610734611e8e565b60405190808252806020026020018201604052801561075d578160200160208202803683370190505b5090506000805b601a81101561081357846003015481141580156107da57506107d881866005018054806020026020016040519081016040528092919081815260200182805480156107ce57602002820191906000526020600020905b8154815260200190600101908083116107ba575b50505050506114f8565b155b1561080b57808383815181106107f2576107f2611ea4565b60209081029190910101528161080781611eba565b9250505b600101610764565b50909695505050505050565b8060075481106108415760405162461bcd60e51b81526004016106e090611e4e565b60008281526004602052604090205482906001600160a01b031633146108995760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b60448201526064016106e0565b8260028060008381526004602081905260409091206006015460ff16908111156108c5576108c5611cac565b146109075760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642067616d6520737461746560701b60448201526064016106e0565b61090f611543565b6109188561156d565b8060085410156109655760405162461bcd60e51b8152602060048201526018602482015277486f75736520696e73756666696369656e742066756e647360401b60448201526064016106e0565b60008681526004602052604081209061097d8861156d565b60068301805461ffff191660031790556008805491925082916000906109a4908490611e7b565b909155505081546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156109e2573d6000803e3d6000fd5b5081546040518281526001600160a01b039091169089907f4040b057894dad8489aa292521553397cd14fa0e341f6e6c9b646f78154efd1c9060200160405180910390a381546040518281526001600160a01b039091169089907ff6ae188cc6336ef5ad970d3c81cda5814b4c4902540924c6924debe94ece13eb9060200160405180910390a3505050610a766001600055565b5050505050565b610a85611479565b610a8d611543565b600854811115610adf5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420686f7573652066756e6473000000000000000060448201526064016106e0565b47811115610b2f5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016106e0565b8060086000828254610b419190611e7b565b90915550506001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610b80573d6000803e3d6000fd5b506040518181527fe474834969d675e228bf44a31064bc4f07a62bf4073d488e004ff38078575acf9060200160405180910390a1610bbe6001600055565b50565b60606002805480602002602001604051908101604052809291908181526020018280548015610c0f57602002820191906000526020600020905b815481526020019060010190808311610bfb575b5050505050905090565b6000816007548110610c3d5760405162461bcd60e51b81526004016106e090611e4e565b610c468361156d565b9392505050565b610c55611479565b3460086000828254610c679190611c3a565b90915550506040513481527f698c6b09e77d6ec12d764617264649ec58ae335c4a80b921d92ee2e44cd2dc559060200160405180910390a1565b6060816007548110610cc55760405162461bcd60e51b81526004016106e090611e4e565b60008381526004602090815260409182902060050180548351818402810184019094528084529091830182828015610d1c57602002820191906000526020600020905b815481526020019060010190808311610d08575b5050505050915050919050565b6000601a8210610d6f5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840c4def040d2dcc8caf607b1b60448201526064016106e0565b60028281548110610d8257610d82611ea4565b90600052602060002001549050919050565b806007548110610db65760405162461bcd60e51b81526004016106e090611e4e565b60008281526004602052604090205482906001600160a01b03163314610e0e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b60448201526064016106e0565b610e16611543565b60008381526004602052604090206001600682015460ff166004811115610e3f57610e3f611cac565b1480610e6357506002600682015460ff166004811115610e6157610e61611cac565b145b610ea45760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642067616d6520737461746560701b60448201526064016106e0565b6002600682015460ff166004811115610ebf57610ebf611cac565b03610f0357837f084c4e8dbed002b0fe4ec01207ee9d6c85c1b98a93cfad7a51407dd25f5a14288260040154604051610efa91815260200190565b60405180910390a25b600a54600482015410610f1f57610f19846116a2565b5061103c565b6000600a826004015481548110610f3857610f38611ea4565b906000526020600020015490506000610f5186836117d2565b6004840180549192506000610f6583611eba565b909155505060068301805460ff19166002179055600483015460405187917fdc5195a0a717d87adda811cfdff4a54ca7bcb612e76854d81b13c20612b6fe5791610fb0918591611ed3565b60405180910390a26009546040516317a627af60e31b8152600481018890526000916001600160a01b03169063bd313d78906024016020604051808303816000875af1158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190611ef5565b600088815260066020526040902055505050505b6110466001600055565b505050565b6002818154811061069757600080fd5b6000611065611543565b67a688906bd8b0000034146110bc5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206465706f7369742065786163746c7920312045544800000000000060448201526064016106e0565b60078054600091826110cd83611eba565b91905055905060006110df82336119cd565b9050604051806101000160405280336001600160a01b0316815260200134815260200183815260200182815260200160008152602001600067ffffffffffffffff81111561112f5761112f611e8e565b604051908082528060200260200182016040528015611158578160200160208202803683370190505b508152602001600181526001602091820181905260008581526004808452604091829020855181546001600160a01b0319166001600160a01b0390911617815585850151938101939093559084015160028301556060840151600383015560808401519082015560a0830151805191926111da92600585019290910190611b65565b5060c082015160068201805460ff191660018360048111156111fe576111fe611cac565b021790555060e09190910151600690910180549115156101000261ff00199092169190911790553360008181526005602090815260408083208054600181018255908452828420018690559282526003905281812084905560095491516317a627af60e31b81526004810185905290916001600160a01b03169063bd313d78906024016020604051808303816000875af11580156112a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c49190611ef5565b6000848152600660205260409081902082905551909150339084907f0c82908456d66c43e9de63edd66f9faf875c8f3a12f936e162d675ec42c354449061130e9086815260200190565b60405180910390a350506001600055905090565b61132a611479565b6001600160a01b03811661135457604051631e4fbdf760e01b8152600060048201526024016106e0565b610bbe816114a6565b611365611bb0565b8160075481106113875760405162461bcd60e51b81526004016106e090611e4e565b60008381526004602081815260409283902083516101008101855281546001600160a01b03168152600182015481840152600282015481860152600382015460608201529281015460808401526005810180548551818502810185019096528086529394919360a086019383018282801561142157602002820191906000526020600020905b81548152602001906001019080831161140d575b5050509183525050600682015460209091019060ff16600481111561144857611448611cac565b600481111561145957611459611cac565b815260069190910154610100900460ff1615156020909101529392505050565b6001546001600160a01b031633146106ba5760405163118cdaa760e01b81523360048201526024016106e0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b8251811015611537578383828151811061151857611518611ea4565b60200260200101510361152f57600191505061153d565b6001016114fc565b50600090505b92915050565b60026000540361156657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000818152600460205260408120600381015460028054849290811061159557611595611ea4565b9060005260206000200154816115ab9190611c3a565b905060005b601a81101561165d5782600301548114158015611624575061162281846005018054806020026020016040519081016040528092919081815260200182805480156107ce57602002820191906000526020600020908154815260200190600101908083116107ba5750505050506114f8565b155b15611655576002818154811061163c5761163c611ea4565b9060005260206000200154826116529190611c3a565b91505b6001016115b0565b50600582015460009061167190601a611e7b565b9050600061167f8284611f24565b9050606461168e604b83611f38565b6116989190611f24565b9695505050505050565b600081815260046020526040812060038101546002805492939290919081106116cd576116cd611ea4565b60009182526020909120015460068301805461ffff191660041790556008549091508111156117395760405162461bcd60e51b8152602060048201526018602482015277486f75736520696e73756666696369656e742066756e647360401b60448201526064016106e0565b806008600082825461174b9190611e7b565b909155505081546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611789573d6000803e3d6000fd5b5081546040518281526001600160a01b039091169084907ff6ae188cc6336ef5ad970d3c81cda5814b4c4902540924c6924debe94ece13eb9060200160405180910390a3505050565b6000828152600460205260408120600581015460609260016117f583601a611e7b565b6117ff9190611e7b565b9050848110156118515760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820626f78657320746f20656c696d696e61746500000060448201526064016106e0565b60008567ffffffffffffffff81111561186c5761186c611e8e565b604051908082528060200260200182016040528015611895578160200160208202803683370190505b509050600080806118a789600a611f38565b6118b1868b611f38565b6118bb9190611c3a565b90505b88831080156118cc57508082105b156119705760006118dc8b611a47565b9050876003015481141580156118fc57506118fa8189600501611ad7565b155b8015611910575061190e818686611b27565b155b1561195d578085858151811061192857611928611ea4565b6020908102919091018101919091526005890180546001810182556000918252919020018190558361195981611eba565b9450505b8261196781611eba565b935050506118be565b8883146119bf5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f2073656c65637420726571756972656420626f7865730060448201526064016106e0565b509198975050505050505050565b600080424484866119df600143611e7b565b6040805160208101969096528501939093526bffffffffffffffffffffffff19606092831b1691840191909152607483015240609482015260b40160408051601f1981840301815291905280516020909101209050611a3f601a82611f4f565b949350505050565b600954600082815260066020526040808220549051632cdc85e960e21b81526004810191909152909182916001600160a01b039091169063b37217a4906024016020604051808303816000875af1158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190611ef5565b9050610c46601a82611f4f565b8054600090815b81811015611b1c5784848281548110611af957611af9611ea4565b906000526020600020015403611b145760019250505061153d565b600101611ade565b506000949350505050565b6000805b82811015611b1c5784848281518110611b4657611b46611ea4565b602002602001015103611b5d576001915050610c46565b600101611b2b565b828054828255906000526020600020908101928215611ba0579160200282015b82811115611ba0578251825591602001919060010190611b85565b50611bac929150611c0f565b5090565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006004811115611c0257611c02611cac565b8152600060209091015290565b5b80821115611bac5760008155600101611c10565b634e487b7160e01b600052601160045260246000fd5b8082018082111561153d5761153d611c24565b80356001600160a01b0381168114611c6457600080fd5b919050565b60008060408385031215611c7c57600080fd5b611c8583611c4d565b946020939093013593505050565b600060208284031215611ca557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110611ce057634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03881681526020810187905260408101869052606081018590526080810184905260e08101611d1d60a0830185611cc2565b82151560c083015298975050505050505050565b600060208284031215611d4357600080fd5b610c4682611c4d565b60008151808452602080850194506020840160005b83811015611d7d57815187529582019590820190600101611d61565b509495945050505050565b602081526000610c466020830184611d4c565b60006020808352610120830160018060a01b03855116828501528185015160408501526040850151606085015260608501516080850152608085015160a085015260a08501516101008060c0870152828251808552610140880191508584019450600093505b80841015611e215784518252938501936001939093019290850190611e01565b5060c08801519450611e3660e0880186611cc2565b60e09790970151151595019490945250929392505050565b60208082526013908201527211d85b5948191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b8181038181111561153d5761153d611c24565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611ecc57611ecc611c24565b5060010190565b604081526000611ee66040830185611d4c565b90508260208301529392505050565b600060208284031215611f0757600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082611f3357611f33611f0e565b500490565b808202811582820484141761153d5761153d611c24565b600082611f5e57611f5e611f0e565b50069056fea2646970667358221220a0476e01ffa0e0ab5cbfcb4b9b2a16607ea923863c64162b92fe5607fedf23cf64736f6c63430008190033",
  "devdoc": {
    "author": "BuidlGuidl",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptDeal(uint256)": {
        "notice": "Accept the current deal offer"
      },
      "depositHouseFunds()": {
        "notice": "Owner deposits funds to house"
      },
      "eliminateBoxes(uint256)": {
        "notice": "Eliminate boxes for the current round (randomly selected) - OPTIMIZED If called when an offer is pending, it implicitly rejects the offer"
      },
      "getGameState(uint256)": {
        "notice": "View functions"
      },
      "startGame()": {
        "notice": "Start a new game - player deposits 1 ETH and selects their box"
      },
      "withdrawHouseFunds(uint256)": {
        "notice": "Owner withdraws house funds"
      }
    },
    "notice": "A Deal or Not smart contract that allows multiple players to play concurrent games Players deposit 1 ETH to start a game and can win up to 30 ETH House offers 75% of expected value at the end of each round",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1136,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 956,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1233,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "prizePool",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1237,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "gameIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1242,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Game)1230_storage)"
      },
      {
        "astId": 1247,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "playerGames",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1251,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "requestIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1253,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "nextGameId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1255,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "houseFunds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1267,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "vrf",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IVRF)2455"
      },
      {
        "astId": 1277,
        "contract": "contracts/DealOrNot.sol:DealOrNot",
        "label": "roundEliminations",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVRF)2455": {
        "encoding": "inplace",
        "label": "contract IVRF",
        "numberOfBytes": "20"
      },
      "t_enum(GameState)1211": {
        "encoding": "inplace",
        "label": "enum DealOrNot.GameState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)1230_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DealOrNot.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)1230_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Game)1230_storage": {
        "encoding": "inplace",
        "label": "struct DealOrNot.Game",
        "members": [
          {
            "astId": 1213,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1215,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1217,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "gameId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1219,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "playerBoxIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1221,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "currentRound",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1224,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "eliminatedBoxes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1227,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "state",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(GameState)1211"
          },
          {
            "astId": 1229,
            "contract": "contracts/DealOrNot.sol:DealOrNot",
            "label": "isActive",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}